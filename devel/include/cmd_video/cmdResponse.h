// Generated by gencpp from file cmd_video/cmdResponse.msg
// DO NOT EDIT!


#ifndef CMD_VIDEO_MESSAGE_CMDRESPONSE_H
#define CMD_VIDEO_MESSAGE_CMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cmd_video
{
template <class ContainerAllocator>
struct cmdResponse_
{
  typedef cmdResponse_<ContainerAllocator> Type;

  cmdResponse_()
    : feedback(0)  {
    }
  cmdResponse_(const ContainerAllocator& _alloc)
    : feedback(0)  {
  (void)_alloc;
    }



   typedef int32_t _feedback_type;
  _feedback_type feedback;





  typedef boost::shared_ptr< ::cmd_video::cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cmd_video::cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct cmdResponse_

typedef ::cmd_video::cmdResponse_<std::allocator<void> > cmdResponse;

typedef boost::shared_ptr< ::cmd_video::cmdResponse > cmdResponsePtr;
typedef boost::shared_ptr< ::cmd_video::cmdResponse const> cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cmd_video::cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cmd_video::cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cmd_video::cmdResponse_<ContainerAllocator1> & lhs, const ::cmd_video::cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.feedback == rhs.feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cmd_video::cmdResponse_<ContainerAllocator1> & lhs, const ::cmd_video::cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cmd_video

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cmd_video::cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cmd_video::cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cmd_video::cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cmd_video::cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmd_video::cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmd_video::cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cmd_video::cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49ceb5b32ea3af22073ede4a0328249e";
  }

  static const char* value(const ::cmd_video::cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49ceb5b32ea3af22ULL;
  static const uint64_t static_value2 = 0x073ede4a0328249eULL;
};

template<class ContainerAllocator>
struct DataType< ::cmd_video::cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmd_video/cmdResponse";
  }

  static const char* value(const ::cmd_video::cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cmd_video::cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 feedback\n"
;
  }

  static const char* value(const ::cmd_video::cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cmd_video::cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cmd_video::cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cmd_video::cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CMD_VIDEO_MESSAGE_CMDRESPONSE_H
